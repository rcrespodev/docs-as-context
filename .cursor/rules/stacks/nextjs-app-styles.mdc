---
description: Style guidelines for the Next.js web application
globs: packages/web/**/*.tsx
alwaysApply: false
---

# Style Guidelines - Next.js Web Application

## Design System

### Color Palette
The application uses a color system based on CSS variables with support for light and dark modes:

**Primary Colors:**
- `--primary`: oklch(0.704 0.204 202) - Medical blue
- `--secondary`: oklch(0.763 0.229 76.4) - Complementary green
- `--accent`: oklch(0.504 0.183 264.1) - Accent purple
- `--destructive`: oklch(0.716 0.248 27.6) - Red for alerts

**Background Colors:**
- `--background`: oklch(1 0 0) (light) / oklch(0.179 0.033 287.5) (dark)
- `--card`: Same as background
- `--muted`: oklch(0.963 0.015 254.9) (light) / oklch(0.259 0.043 260.2) (dark)

### Typography
- **Primary font**: Geist Sans (--font-geist-sans)
- **Monospace font**: Geist Mono (--font-geist-mono)
- **Text sizes**:
  - Main titles: `text-3xl font-bold tracking-tight`
  - Subtitles: `text-sm font-medium`
  - Description text: `text-muted-foreground`
  - Small text: `text-xs text-muted-foreground`

## CSS Class Management

### `cn()` Function - Best Practice

**IMPORTANT**: Always use the `cn()` function to combine CSS classes instead of string concatenation.

```tsx
// ✅ CORRECT - Use cn()
import { cn } from '@/lib/utils';

<div className={cn('space-y-2', className)}>
  {/* Content */}
</div>

// ❌ INCORRECT - String concatenation
<div className={`space-y-2 ${className}`}>
  {/* Content */}
</div>
```

### Advantages of using `cn()`:
- **Automatic conflict resolution**: Tailwind CSS automatically resolves conflicting classes
- **Better performance**: Avoids class duplication
- **TypeScript safe**: Better type inference
- **Consistency**: Uniform pattern across the application

### Usage Examples

```tsx
// Conditional classes
<div className={cn(
  'base-class',
  isActive && 'active-class',
  isDisabled && 'disabled-class',
  className
)}>

// Classes with props
<div className={cn(
  'space-y-2',
  variant === 'compact' && 'space-y-1',
  variant === 'spacious' && 'space-y-4',
  className
)}>

// Classes with breakpoints
<div className={cn(
  'grid gap-4',
  'md:grid-cols-2 lg:grid-cols-4',
  className
)}>
```

## UI Components

### Layout and Spacing
```tsx
// Main container with consistent spacing
<div className="space-y-6 mx-auto max-w-7xl">
  {/* Content */}
</div>

// Responsive grid for cards
<div className="grid gap-4 md:grid-cols-2 lg:grid-cols-4 w-full">
  {/* Cards */}
</div>

// Two-column layout
<div className="grid gap-4 md:grid-cols-2 w-full">
  {/* Content */}
</div>
```

### Mobile First
When design a new component, always start with the mobile first approach. All components should be responsive and work on all devices.

### Responsive Layout

- Use the `w-full` class to make the layout responsive.
- Use the `mx-auto` class to center the content.
- Use the `max-w-7xl` class to limit the width of the content.
- Use the `md:grid-cols-2` class to make the layout responsive.
- Use the `lg:grid-cols-4` class to make the layout responsive.
- Use the `gap-4` class to add spacing between the elements.
- Allways center the children content with `items-center` and `justify-center` classes.
- Allways justify the text with `text-center` class.
- Allways use accessible colors for the text and background with `text-foreground`, `bg-background`, etc.
- When design a new component, use the `className` prop to add the classes to the component.
- When design a new component, use the `children` prop to add the content to the component.
- When design a new component follow the shadcn/ui components structure.

### Cards
Always use Cards components for structure the content of the page or components.

```tsx
// Standard card
<Card>
  <CardHeader className="flex flex-row items-center justify-between space-y-0 pb-2">
    <CardTitle className="text-sm font-medium">Title</CardTitle>
    <Icon className="h-4 w-4 text-muted-foreground" />
  </CardHeader>
  <CardContent>
    <div className="text-2xl font-bold">Value</div>
    <p className="text-xs text-muted-foreground">Description</p>
  </CardContent>
  <CardFooter>
    {/* Actions */}
  </CardFooter>
</Card>

// Card with description
<Card>
  <CardHeader>
    <CardTitle>Title</CardTitle>
    <CardDescription>Content description</CardDescription>
  </CardHeader>
  <CardContent>
    {/* Content */}
  </CardContent>
  <CardFooter>
    <Button variant="outline" className="w-full">
      Action
    </Button>
  </CardFooter>
</Card>
```

### Buttons
```tsx
// Primary button with icon
<Button>
  <Icon className="mr-2 h-4 w-4" />
  Button text
</Button>

// Outline button
<Button variant="outline">Button text</Button>

// Ghost button with icon
<Button variant="ghost" size="icon">
  <Icon className="h-4 w-4" />
</Button>
```

### Icons
- **Standard size**: `h-4 w-4`
- **Small size**: `h-3 w-3`
- **Large size**: `h-5 w-5`
- **Colors**:
  - `text-muted-foreground` for secondary icons
  - `text-primary` for action icons
  - `text-destructive` for alerts

### Sidebar
```tsx
// Sidebar structure
<Sidebar collapsible="icon" className="bg-background z-50 py-4 md:py-6">
  <SidebarHeader className="bg-background">
    {/* Logo and title */}
  </SidebarHeader>
  <SidebarContent className="bg-background">
    {/* Main navigation */}
  </SidebarContent>
  <SidebarFooter className="bg-background">
    {/* User information */}
  </SidebarFooter>
</Sidebar>
```

## Design Patterns

### Page Headers
```tsx
<div className="flex flex-col justify-between gap-4 md:flex-row md:items-center">
  <div>
    <h1 className="text-3xl font-bold tracking-tight">Page Title</h1>
    <p className="text-muted-foreground">
      Page description or context
    </p>
  </div>
  <div className="flex items-center gap-2">
    {/* Action buttons */}
  </div>
</div>
```

### Item Lists
```tsx
<div className="space-y-4">
  {items.map((item, i) => (
    <div key={i} className="flex items-center justify-between">
      <div className="flex items-center gap-4">
        <div className="rounded-full bg-primary/10 p-2">
          <Icon className="h-4 w-4 text-primary" />
        </div>
        <div>
          <p className="font-medium">{item.name}</p>
          <p className="text-sm text-muted-foreground">{item.description}</p>
        </div>
      </div>
      <div className="flex items-center gap-2">
        {/* Actions */}
      </div>
    </div>
  ))}
</div>
```

### Charts and Visualizations
```tsx
// Chart color usage
areas={[
  { dataKey: 'value1', color: 'var(--chart-1)' },
  { dataKey: 'value2', color: 'var(--chart-2)' },
  { dataKey: 'value3', color: 'var(--chart-3)' },
]}
```

## Responsive Design

### Breakpoints
- **Mobile**: `< 768px` - Single column layout
- **Tablet**: `768px - 1024px` - Two column layout
- **Desktop**: `> 1024px` - Full layout

### Responsive Classes
```tsx
// Hide/show elements
className="hidden md:block" // Hidden on mobile, visible on desktop
className="block md:hidden" // Visible on mobile, hidden on desktop

// Responsive padding
className="p-1 md:p-6" // Small padding on mobile, large on desktop

// Responsive text
className="text-sm md:text-xl" // Small text on mobile, large on desktop
```

## States and Feedback

### Button States
- **Default**: `Button`
- **Outline**: `Button variant="outline"`
- **Ghost**: `Button variant="ghost"`
- **Destructive**: `Button variant="destructive"`

### State Indicators
```tsx
// Notification badge
<span className="absolute -right-1 -top-1 flex h-4 w-4 items-center justify-center rounded-full bg-destructive text-[10px] font-medium text-destructive-foreground">
  3
</span>

// Progress bar
<Progress value={82} className="mt-2" />
```

## Accessibility

### Contrast and Readability
- Use `text-muted-foreground` for secondary text
- Maintain adequate contrast between text and background
- Use icons with descriptive text when necessary

### Navigation
- Use Next.js `Link` for internal navigation
- Provide alternative text for icons
- Maintain semantic structure with appropriate headers

## Implementation Examples

### Dashboard Card
```tsx
<Card>
  <CardHeader className="flex flex-row items-center justify-between space-y-0 pb-2">
    <CardTitle className="text-sm font-medium">Total Patients</CardTitle>
    <Users className="h-4 w-4 text-muted-foreground" />
  </CardHeader>
  <CardContent>
    <div className="text-2xl font-bold">1,248</div>
    <p className="text-xs text-muted-foreground">+12% from last month</p>
  </CardContent>
</Card>
```

### Alert List
```tsx
<div className="flex items-center justify-between">
  <div className="flex items-center gap-4">
    <div className="rounded-full bg-destructive/10 p-2">
      <AlertTriangle className="h-4 w-4 text-destructive" />
    </div>
    <div>
      <p className="font-medium">{alert.patient}</p>
      <p className="text-sm text-muted-foreground">{alert.message}</p>
    </div>
  </div>
  <div className="text-xs text-muted-foreground">{alert.time}</div>
</div>
```

## Performance Considerations

### CSS Optimization
- Use Tailwind CSS classes for consistency
- Avoid custom CSS when possible
- Leverage CSS variable system for themes

### Components
- Use shadcn/ui components for consistency
- Maintain reusable components
- Follow React composition pattern

## Edge Cases

1. **Long content**: Use `text-wrap` for long titles
2. **Missing icons**: Provide appropriate fallbacks
3. **Empty data**: Show loading states or informative messages
4. **Responsive**: Ensure all elements are readable on mobile

## Security

- Validate all input data
- Sanitize dynamic content
- Use Next.js `Link` for secure navigation
- Implement appropriate authentication on all protected routes

- Validar todos los datos de entrada
- Sanitizar contenido dinámico
- Usar `Link` de Next.js para navegación segura
- Implementar autenticación apropiada en todas las rutas protegidas