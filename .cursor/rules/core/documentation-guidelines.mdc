---
description: Standards for Markdown documentation across all projects
globs: **/*.md
alwaysApply: false
---
# Documentation Standards

## Overview
This rule defines standards for creating clear, comprehensive, and maintainable documentation using Markdown format. It covers README files, API documentation, code comments, and project documentation.

## Markdown Guidelines

### Headers
```markdown
# Main Title (H1)
## Section Title (H2)
### Subsection Title (H3)
#### Detail Title (H4)
```

### Code Blocks
```markdown
# Inline code
Use `code` for inline code snippets.

# Code blocks with language
```typescript
function example() {
  return 'Hello World';
}
```

### Lists
```markdown
# Unordered lists
- Item 1
- Item 2
  - Subitem 2.1
  - Subitem 2.2
- Item 3

# Ordered lists
1. First step
2. Second step
3. Third step

# Task lists
- [x] Completed task
- [ ] Pending task
- [ ] Another pending task
```

### Tables
```markdown
| Column 1 | Column 2 | Column 3 |
|----------|----------|----------|
| Data 1   | Data 2   | Data 3   |
| Data 4   | Data 5   | Data 6   |
```

## Project Documentation

### Architecture Documentation
```markdown
# Architecture Overview

## System Components

### Frontend (React/Next.js)
- **Purpose**: User interface and client-side logic
- **Technology**: React 18, Next.js 14, TypeScript
- **Key Features**: SSR, API routes, authentication

### Backend (NestJS)
- **Purpose**: API server and business logic
- **Technology**: NestJS, TypeScript, PostgreSQL
- **Key Features**: REST API, authentication, database management

### Database (PostgreSQL)
- **Purpose**: Data persistence
- **Technology**: PostgreSQL 14, Prisma ORM
- **Key Features**: ACID compliance, migrations, seeding
```

### Data Flow
```mermaid
graph TD
    A[User] --> B[Frontend]
    B --> C[API Gateway]
    C --> D[Backend API]
    D --> E[Database]
    E --> D
    D --> C
    C --> B
    B --> A
```

### Setup Documentation (README.md example)
```markdown
# Development Setup

## Prerequisites

- Node.js 18+ ([Download](https://nodejs.org/))
- PostgreSQL 14+ ([Download](https://www.postgresql.org/))
- Git ([Download](https://git-scm.com/))

## Installation

1. Clone the repository:
   git clone https://github.com/org/project.git
   cd project

2. Install dependencies:
   npm install

3. Set up environment variables:
   cp .env.example .env
   # Edit .env with your configuration

4. Set up the database:
   npm run db:migrate
   npm run db:seed

5. Start the development server:
   npm run dev

## Environment Variables

| Variable | Description | Required | Default |
|----------|-------------|----------|---------|
| `DATABASE_URL` | PostgreSQL connection string | Yes | - |
| `JWT_SECRET` | Secret for JWT tokens | Yes | - |
| `NODE_ENV` | Environment mode | No | `development` |
| `PORT` | Server port | No | `3000` |

## Available Scripts

- `npm run dev` - Start development server
- `npm run build` - Build for production
- `npm run test` - Run tests
- `npm run lint` - Run linter
- `npm run db:migrate` - Run database migrations
- `npm run db:seed` - Seed database with test data

# Version History

## v2.0.0 (2024-01-01)
- Breaking: Changed API response format
- Added: New user management features
- Fixed: Authentication bug in mobile app

## v1.5.0 (2023-12-01)
- Added: Password reset functionality
- Improved: Performance optimizations
- Fixed: Minor UI issues

## v1.0.0 (2023-11-01)
- Initial release
- Basic user management
- Authentication system
```

### Documentation Templates
For specific documentation templates, see the following rules:
- **Application Flow Documentation**: Use `@application-flow-documentation` rule for documenting user flows
- **Product Requirements Document (PRD)**: Use `@prd-documentation` rule for creating PRDs
- **User Stories**: Use `@user-stories` rule for documenting user stories

## Documentation Best Practices

### Writing Style
- Use clear, concise language
- Write for your audience (developers, users, etc.)
- Use active voice when possible
- Be consistent with terminology

### Organization
- Start with an overview
- Use logical progression from basic to advanced
- Include examples and code snippets
- Provide troubleshooting sections

### Maintenance
- Keep documentation up to date with code changes
- Review and update regularly
- Remove outdated information
- Add new sections as needed

## Security Concerns

### Sensitive Information
- Never include API keys, passwords, or tokens in documentation
- Use placeholder values for examples
- Document security requirements clearly
- Include security best practices

### Access Control
- Document authentication requirements
- Explain authorization levels
- Provide security guidelines
- Include security contact information

### Data Privacy
- Document data handling practices
- Explain privacy controls
- Include GDPR compliance information
- Provide data deletion procedures